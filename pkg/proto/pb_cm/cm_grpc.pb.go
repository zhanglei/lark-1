// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: pb_cm/cm.proto

package pb_cm

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CloudMessageClient is the client API for CloudMessage service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CloudMessageClient interface {
	CloudMessage(ctx context.Context, in *CloudMessageReq, opts ...grpc.CallOption) (*CloudMessageResp, error)
}

type cloudMessageClient struct {
	cc grpc.ClientConnInterface
}

func NewCloudMessageClient(cc grpc.ClientConnInterface) CloudMessageClient {
	return &cloudMessageClient{cc}
}

func (c *cloudMessageClient) CloudMessage(ctx context.Context, in *CloudMessageReq, opts ...grpc.CallOption) (*CloudMessageResp, error) {
	out := new(CloudMessageResp)
	err := c.cc.Invoke(ctx, "/pb_cm.CloudMessage/CloudMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CloudMessageServer is the server API for CloudMessage service.
// All implementations must embed UnimplementedCloudMessageServer
// for forward compatibility
type CloudMessageServer interface {
	CloudMessage(context.Context, *CloudMessageReq) (*CloudMessageResp, error)
	mustEmbedUnimplementedCloudMessageServer()
}

// UnimplementedCloudMessageServer must be embedded to have forward compatible implementations.
type UnimplementedCloudMessageServer struct {
}

func (UnimplementedCloudMessageServer) CloudMessage(context.Context, *CloudMessageReq) (*CloudMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CloudMessage not implemented")
}
func (UnimplementedCloudMessageServer) mustEmbedUnimplementedCloudMessageServer() {}

// UnsafeCloudMessageServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CloudMessageServer will
// result in compilation errors.
type UnsafeCloudMessageServer interface {
	mustEmbedUnimplementedCloudMessageServer()
}

func RegisterCloudMessageServer(s grpc.ServiceRegistrar, srv CloudMessageServer) {
	s.RegisterService(&CloudMessage_ServiceDesc, srv)
}

func _CloudMessage_CloudMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CloudMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CloudMessageServer).CloudMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_cm.CloudMessage/CloudMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CloudMessageServer).CloudMessage(ctx, req.(*CloudMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

// CloudMessage_ServiceDesc is the grpc.ServiceDesc for CloudMessage service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CloudMessage_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_cm.CloudMessage",
	HandlerType: (*CloudMessageServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CloudMessage",
			Handler:    _CloudMessage_CloudMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_cm/cm.proto",
}
