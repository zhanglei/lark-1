// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: pb_chat/chat.proto

package pb_chat

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	CreateGroupChat(ctx context.Context, in *CreateGroupChatReq, opts ...grpc.CallOption) (*CreateGroupChatResp, error)
	EditGroupChat(ctx context.Context, in *EditGroupChatReq, opts ...grpc.CallOption) (*EditGroupChatResp, error)
	GroupChatDetails(ctx context.Context, in *GroupChatDetailsReq, opts ...grpc.CallOption) (*GroupChatDetailsResp, error)
	RemoveGroupChatMember(ctx context.Context, in *RemoveGroupChatMemberReq, opts ...grpc.CallOption) (*RemoveGroupChatMemberResp, error)
	QuitGroupChat(ctx context.Context, in *QuitGroupChatReq, opts ...grpc.CallOption) (*QuitGroupChatResp, error)
	DeleteContact(ctx context.Context, in *DeleteContactReq, opts ...grpc.CallOption) (*DeleteContactResp, error)
	UploadAvatar(ctx context.Context, in *UploadAvatarReq, opts ...grpc.CallOption) (*UploadAvatarResp, error)
	GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) CreateGroupChat(ctx context.Context, in *CreateGroupChatReq, opts ...grpc.CallOption) (*CreateGroupChatResp, error) {
	out := new(CreateGroupChatResp)
	err := c.cc.Invoke(ctx, "/pb_chat.Chat/CreateGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) EditGroupChat(ctx context.Context, in *EditGroupChatReq, opts ...grpc.CallOption) (*EditGroupChatResp, error) {
	out := new(EditGroupChatResp)
	err := c.cc.Invoke(ctx, "/pb_chat.Chat/EditGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GroupChatDetails(ctx context.Context, in *GroupChatDetailsReq, opts ...grpc.CallOption) (*GroupChatDetailsResp, error) {
	out := new(GroupChatDetailsResp)
	err := c.cc.Invoke(ctx, "/pb_chat.Chat/GroupChatDetails", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) RemoveGroupChatMember(ctx context.Context, in *RemoveGroupChatMemberReq, opts ...grpc.CallOption) (*RemoveGroupChatMemberResp, error) {
	out := new(RemoveGroupChatMemberResp)
	err := c.cc.Invoke(ctx, "/pb_chat.Chat/RemoveGroupChatMember", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) QuitGroupChat(ctx context.Context, in *QuitGroupChatReq, opts ...grpc.CallOption) (*QuitGroupChatResp, error) {
	out := new(QuitGroupChatResp)
	err := c.cc.Invoke(ctx, "/pb_chat.Chat/QuitGroupChat", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) DeleteContact(ctx context.Context, in *DeleteContactReq, opts ...grpc.CallOption) (*DeleteContactResp, error) {
	out := new(DeleteContactResp)
	err := c.cc.Invoke(ctx, "/pb_chat.Chat/DeleteContact", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) UploadAvatar(ctx context.Context, in *UploadAvatarReq, opts ...grpc.CallOption) (*UploadAvatarResp, error) {
	out := new(UploadAvatarResp)
	err := c.cc.Invoke(ctx, "/pb_chat.Chat/UploadAvatar", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) GetChatInfo(ctx context.Context, in *GetChatInfoReq, opts ...grpc.CallOption) (*GetChatInfoResp, error) {
	out := new(GetChatInfoResp)
	err := c.cc.Invoke(ctx, "/pb_chat.Chat/GetChatInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	CreateGroupChat(context.Context, *CreateGroupChatReq) (*CreateGroupChatResp, error)
	EditGroupChat(context.Context, *EditGroupChatReq) (*EditGroupChatResp, error)
	GroupChatDetails(context.Context, *GroupChatDetailsReq) (*GroupChatDetailsResp, error)
	RemoveGroupChatMember(context.Context, *RemoveGroupChatMemberReq) (*RemoveGroupChatMemberResp, error)
	QuitGroupChat(context.Context, *QuitGroupChatReq) (*QuitGroupChatResp, error)
	DeleteContact(context.Context, *DeleteContactReq) (*DeleteContactResp, error)
	UploadAvatar(context.Context, *UploadAvatarReq) (*UploadAvatarResp, error)
	GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) CreateGroupChat(context.Context, *CreateGroupChatReq) (*CreateGroupChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroupChat not implemented")
}
func (UnimplementedChatServer) EditGroupChat(context.Context, *EditGroupChatReq) (*EditGroupChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditGroupChat not implemented")
}
func (UnimplementedChatServer) GroupChatDetails(context.Context, *GroupChatDetailsReq) (*GroupChatDetailsResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GroupChatDetails not implemented")
}
func (UnimplementedChatServer) RemoveGroupChatMember(context.Context, *RemoveGroupChatMemberReq) (*RemoveGroupChatMemberResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroupChatMember not implemented")
}
func (UnimplementedChatServer) QuitGroupChat(context.Context, *QuitGroupChatReq) (*QuitGroupChatResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QuitGroupChat not implemented")
}
func (UnimplementedChatServer) DeleteContact(context.Context, *DeleteContactReq) (*DeleteContactResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteContact not implemented")
}
func (UnimplementedChatServer) UploadAvatar(context.Context, *UploadAvatarReq) (*UploadAvatarResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadAvatar not implemented")
}
func (UnimplementedChatServer) GetChatInfo(context.Context, *GetChatInfoReq) (*GetChatInfoResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetChatInfo not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_CreateGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGroupChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).CreateGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chat.Chat/CreateGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).CreateGroupChat(ctx, req.(*CreateGroupChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_EditGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditGroupChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).EditGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chat.Chat/EditGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).EditGroupChat(ctx, req.(*EditGroupChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GroupChatDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GroupChatDetailsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GroupChatDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chat.Chat/GroupChatDetails",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GroupChatDetails(ctx, req.(*GroupChatDetailsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_RemoveGroupChatMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RemoveGroupChatMemberReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).RemoveGroupChatMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chat.Chat/RemoveGroupChatMember",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).RemoveGroupChatMember(ctx, req.(*RemoveGroupChatMemberReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_QuitGroupChat_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QuitGroupChatReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).QuitGroupChat(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chat.Chat/QuitGroupChat",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).QuitGroupChat(ctx, req.(*QuitGroupChatReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_DeleteContact_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteContactReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).DeleteContact(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chat.Chat/DeleteContact",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).DeleteContact(ctx, req.(*DeleteContactReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_UploadAvatar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadAvatarReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).UploadAvatar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chat.Chat/UploadAvatar",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).UploadAvatar(ctx, req.(*UploadAvatarReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_GetChatInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChatInfoReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).GetChatInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_chat.Chat/GetChatInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).GetChatInfo(ctx, req.(*GetChatInfoReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_chat.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroupChat",
			Handler:    _Chat_CreateGroupChat_Handler,
		},
		{
			MethodName: "EditGroupChat",
			Handler:    _Chat_EditGroupChat_Handler,
		},
		{
			MethodName: "GroupChatDetails",
			Handler:    _Chat_GroupChatDetails_Handler,
		},
		{
			MethodName: "RemoveGroupChatMember",
			Handler:    _Chat_RemoveGroupChatMember_Handler,
		},
		{
			MethodName: "QuitGroupChat",
			Handler:    _Chat_QuitGroupChat_Handler,
		},
		{
			MethodName: "DeleteContact",
			Handler:    _Chat_DeleteContact_Handler,
		},
		{
			MethodName: "UploadAvatar",
			Handler:    _Chat_UploadAvatar_Handler,
		},
		{
			MethodName: "GetChatInfo",
			Handler:    _Chat_GetChatInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_chat/chat.proto",
}
