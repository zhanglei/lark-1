// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.6
// source: pb_dist/dist.proto

package pb_dist

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistClient is the client API for Dist service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistClient interface {
	DistMessage(ctx context.Context, in *DistMessageReq, opts ...grpc.CallOption) (*DistMessageResp, error)
	ChatInviteNotification(ctx context.Context, in *ChatInviteNotificationReq, opts ...grpc.CallOption) (*ChatInviteNotificationResp, error)
}

type distClient struct {
	cc grpc.ClientConnInterface
}

func NewDistClient(cc grpc.ClientConnInterface) DistClient {
	return &distClient{cc}
}

func (c *distClient) DistMessage(ctx context.Context, in *DistMessageReq, opts ...grpc.CallOption) (*DistMessageResp, error) {
	out := new(DistMessageResp)
	err := c.cc.Invoke(ctx, "/pb_dist.Dist/DistMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *distClient) ChatInviteNotification(ctx context.Context, in *ChatInviteNotificationReq, opts ...grpc.CallOption) (*ChatInviteNotificationResp, error) {
	out := new(ChatInviteNotificationResp)
	err := c.cc.Invoke(ctx, "/pb_dist.Dist/ChatInviteNotification", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistServer is the server API for Dist service.
// All implementations must embed UnimplementedDistServer
// for forward compatibility
type DistServer interface {
	DistMessage(context.Context, *DistMessageReq) (*DistMessageResp, error)
	ChatInviteNotification(context.Context, *ChatInviteNotificationReq) (*ChatInviteNotificationResp, error)
	mustEmbedUnimplementedDistServer()
}

// UnimplementedDistServer must be embedded to have forward compatible implementations.
type UnimplementedDistServer struct {
}

func (UnimplementedDistServer) DistMessage(context.Context, *DistMessageReq) (*DistMessageResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DistMessage not implemented")
}
func (UnimplementedDistServer) ChatInviteNotification(context.Context, *ChatInviteNotificationReq) (*ChatInviteNotificationResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChatInviteNotification not implemented")
}
func (UnimplementedDistServer) mustEmbedUnimplementedDistServer() {}

// UnsafeDistServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistServer will
// result in compilation errors.
type UnsafeDistServer interface {
	mustEmbedUnimplementedDistServer()
}

func RegisterDistServer(s grpc.ServiceRegistrar, srv DistServer) {
	s.RegisterService(&Dist_ServiceDesc, srv)
}

func _Dist_DistMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistMessageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistServer).DistMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_dist.Dist/DistMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistServer).DistMessage(ctx, req.(*DistMessageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dist_ChatInviteNotification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatInviteNotificationReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistServer).ChatInviteNotification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb_dist.Dist/ChatInviteNotification",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistServer).ChatInviteNotification(ctx, req.(*ChatInviteNotificationReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Dist_ServiceDesc is the grpc.ServiceDesc for Dist service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dist_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb_dist.Dist",
	HandlerType: (*DistServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "DistMessage",
			Handler:    _Dist_DistMessage_Handler,
		},
		{
			MethodName: "ChatInviteNotification",
			Handler:    _Dist_ChatInviteNotification_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb_dist/dist.proto",
}
